#include <stdio.h>

// Function to calculate factorial

unsigned long long factorial(int n) {

    if (n == 0 || n == 1)

        return 1;

    else

        return n * factorial(n - 1);

}

 

// Function to calculate Fibonacci sequence

unsigned long long fibonacci(int n) {

    if (n == 0)

        return 0;

    else if (n == 1)

        return 1;

    else {

        unsigned long long a = 0, b = 1, temp;

        for (int i = 2; i <= n; i++) {

            temp = a + b;

            a = b;

            b = temp;

        }

        return b;

    }

}

 

// Function to calculate permutations of a string

unsigned long long permutations(char str[], int n) {

    unsigned long long result = factorial(n);

    int count[26] = {0};

 

    // Count the frequency of each character

    for (int i = 0; i < n; i++) {

        count[str[i] - 'A']++;

    }

 

    // Divide by factorial of frequencies

    for (int i = 0; i < 26; i++) {

        if (count[i] > 1) {

            result /= factorial(count[i]);

        }

    }

 

    return result;

}

 

int main() {

    int n;

    printf("Enter an integer (n): ");

    scanf("%d", &n);

 

    // Calculate Fibonacci and factorial

    unsigned long long fib = fibonacci(n);

    unsigned long long fact = factorial(n);

 

    printf("Fibonacci for Rose Flower(%d) = %llu\n", n, fib);

    printf("Factorial(%d) = %llu\n", n, fact);

 

    // Calculate permutations of "PIZZA"

    char word[] = "PIZZA";

    int word_length = sizeof(word) - 1; // Exclude the null terminator

    unsigned long long perms = permutations(word, word_length);

 

    printf("Number of permutations of 'PIZZA' = %llu\n", perms);

 

    return 0;

}
